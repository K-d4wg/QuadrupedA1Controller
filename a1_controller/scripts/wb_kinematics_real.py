#!/usr/bin/env python3

# DEMO Script for Wholebody-Kinematics on the real robot

import pygame
import numpy as np
import rospy
import A1_kinematics
from sensor_msgs.msg import JointState
from qre_msgs.msg import JointCMD
from Trajectory_Planner import Trajectory_Planner

# Pygame mostly generated by ChatGPT
command_topics = ["/a1_gazebo/FL_calf_controller/command",
                  "/a1_gazebo/FL_hip_controller/command",
                  "/a1_gazebo/FL_thigh_controller/command",
                  "/a1_gazebo/FR_calf_controller/command",
                  "/a1_gazebo/FR_hip_controller/command",
                  "/a1_gazebo/FR_thigh_controller/command",
                  "/a1_gazebo/RL_calf_controller/command",
                  "/a1_gazebo/RL_hip_controller/command",
                  "/a1_gazebo/RL_thigh_controller/command",
                  "/a1_gazebo/RR_calf_controller/command",
                  "/a1_gazebo/RR_hip_controller/command",
                  "/a1_gazebo/RR_thigh_controller/command"]

Kd = 5
Kp = 50 #300

NUMBER_OF_JOINTS = 12

class PoseControllerUI:
    def __init__(self, width=400, height=300):
        pygame.init()
        pygame.font.init()  # Initialize the font module
        
        self.FONT_SIZE = 24
        self.font = pygame.font.SysFont(None, self.FONT_SIZE)
        
        
        # Screen dimensions and setup
        self.width = width
        self.height = height
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("Pose Controller")

        # Constants
        self.SLIDER_RADIUS = 50
        self.JOYSTICK_RADIUS = 15
        self.CENTER1 = (width*1/5, height/2)
        self.CENTER2 = (width/2, height/2)
        self.CENTER3 = (width*4/5, height/2)


        # Joystick positions
        self.joystick1_pos = self.CENTER1
        self.joystick2_pos = self.CENTER2
        self.joystick3_pos = self.CENTER3
        
        # Active joystick flags
        self.active_joystick1 = False
        self.active_joystick2 = False
        self.active_joystick3 = False
        
        # init ROS and Robots Positions:
        rospy.init_node('pose_publisher_ui', anonymous=True)
        
        rospy.Subscriber("joint_states", JointState, self.joint_states_callback)
        self.robot_joints_pub = rospy.Publisher('joint_cmd', JointCMD, queue_size=1)

        self.rate = rospy.Rate(25)
        
        self.positions = []
        
        self.goal_pos = np.array([-1.9583591983757351, -0.0007974578255129927, 0.9794434592400876, 
                                  -1.9580158278760527, 0.00048751519737599835, 0.97896869674112, 
                                  -1.968766039552742, 0.0005508150816577739, 0.9651295186701967, 
                                  -1.968942195136563, 0.0002753686771956865, 0.9639652783917043])  # standing configuration
        
        # receive first message to set the starting position
        first_pos = rospy.wait_for_message("joint_states",JointState,2)
        self.startup_pos =  np.array(first_pos.position)


        self.base_height = 0.225
        self.base_width = -0.0838
        self.hip_to_toe_pos = [[-0.0838, 0.225, 0.0],  # FL
                               [0.0838, 0.225, 0.0],  # FR
                               [-0.0838, 0.225, 0.0],  # RL
                               [0.0838, 0.225, 0.0]]  # RR
        
        self.slider_height  = self.height = self.hip_to_toe_pos[0][1]
        self.slider_width = self.width = self.hip_to_toe_pos[0][0]
        self.slider_length = self.length = self.hip_to_toe_pos[0][2]
        
        self.slider_yaw = self.yaw = 0.0       
        self.slider_pitch = self.pitch = 0.0  
        self.slider_roll = self.roll = 0.0 
         

        self.global_positions = [[0, 0, 0],
                                 [0, 0, 0],
                                 [0, 0, 0],
                                 [0, 0, 0]]
            
            
    def draw_joystick(self, center, position, color, label = "No Label"):
        pygame.draw.circle(self.screen, color, center, self.SLIDER_RADIUS, 2)
        pygame.draw.circle(self.screen, color, position, self.JOYSTICK_RADIUS)
        text_surface = self.font.render(label, True, color)
        text_rect = text_surface.get_rect(center=(center[0], center[1] - self.SLIDER_RADIUS - 20))
        self.screen.blit(text_surface, text_rect)

    def get_joystick_position(self, center, mouse_pos):
        dx = mouse_pos[0] - center[0]
        dy = mouse_pos[1] - center[1]
        distance = np.hypot(dx, dy) 
        if distance > self.SLIDER_RADIUS - self.JOYSTICK_RADIUS:
            angle = np.arctan2(dy, dx) 
            dx = (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS) * np.cos(angle)
            dy = (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS) * np.sin(angle)
        return (center[0] + dx, center[1] + dy)

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if np.hypot(event.pos[0] - self.joystick1_pos[0], event.pos[1] - self.joystick1_pos[1]) <= self.JOYSTICK_RADIUS:
                    self.active_joystick1 = True
                elif np.hypot(event.pos[0] - self.joystick2_pos[0], event.pos[1] - self.joystick2_pos[1]) <= self.JOYSTICK_RADIUS:
                    self.active_joystick2 = True
                elif np.hypot(event.pos[0] - self.joystick3_pos[0], event.pos[1] - self.joystick3_pos[1]) <= self.JOYSTICK_RADIUS:
                    self.active_joystick3 = True
                    
            elif event.type == pygame.MOUSEBUTTONUP:
                self.active_joystick1 = False
                self.active_joystick2 = False
                self.active_joystick3 = False
                # reset if slider is let go 
                self.slider_pitch = self.slider_roll = self.slider_yaw = 0.0
                self.slider_height = self.base_height
                self.slider_width = self.base_width
                self.slider_length = 0.0
                self.joystick1_pos = self.CENTER1
                self.joystick2_pos = self.CENTER2
                self.joystick3_pos = self.CENTER3
                
            elif event.type == pygame.MOUSEMOTION:
                if self.active_joystick1:
                    self.joystick1_pos = self.get_joystick_position(self.CENTER1, event.pos)
                    self.slider_roll = ((self.joystick1_pos[0] - self.CENTER1[0]) / (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS))/2
                    self.slider_length = ((self.joystick1_pos[1] - self.CENTER1[1]) / (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS))/10
                    
                elif self.active_joystick2:
                    self.joystick2_pos = self.get_joystick_position(self.CENTER2, event.pos)
                    self.slider_yaw = ((self.joystick2_pos[0] - self.CENTER2[0]) / (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS))/2
                    self.slider_height = self.base_height - ((self.joystick2_pos[1] - self.CENTER2[1]) / (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS))/10    
                                 
                elif self.active_joystick3:
                    self.joystick3_pos = self.get_joystick_position(self.CENTER3, event.pos)
                    self.slider_pitch = ((self.joystick3_pos[0] - self.CENTER3[0]) / (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS))/2
                    self.slider_width = self.base_width - ((self.joystick3_pos[1] - self.CENTER3[1]) / (self.SLIDER_RADIUS - self.JOYSTICK_RADIUS))/10
        return True

    def run(self):
        running = True
        
        # init JointCMD Message
        joint_msg = JointCMD
        joint_msg.Kp = [50.0]*NUMBER_OF_JOINTS
        joint_msg.Kd = [5.0]*NUMBER_OF_JOINTS
        
        t = 0
        tp = Trajectory_Planner()
        ## initialize display:
        self.screen.fill((255, 255, 255))
        self.draw_joystick(self.CENTER1, self.joystick1_pos, (0, 0, 255), "Roll/Move X")
        self.draw_joystick(self.CENTER2, self.joystick2_pos, (255, 0, 0), "Yaw/Move Z")
        self.draw_joystick(self.CENTER3, self.joystick3_pos, (0, 255, 0), "Pitch/Move Y")
        pygame.display.flip()

        print("Standing up")
        num_steps = 100
        step = (self.goal_pos - self.startup_pos)/num_steps
        
        for j in range(num_steps):
            joints = list()
            for i in range(0, NUMBER_OF_JOINTS):
                self.startup_pos[i] += step[i]
                joints.append(self.startup_pos[i])

            joint_msg.q  = joints
            self.rate.sleep()
        
        while running:
            running = self.handle_events()
            
            # calculate error for each joystick value to current value
            roll_error = (self.slider_roll - self.roll)/10
            yaw_error = (self.slider_yaw - self.yaw)/10    # dividing by 10 to smoothen the movement
            pitch_error = (self.slider_pitch - self.pitch)/10
            height_error = (self.slider_height -  self.height)/10
            length_error = (self.slider_length - self.length)/10
            width_error = (self.slider_width - self.width)/10
            
            # ROS CONTROL LOOP
            for legIdx in range(0,4):                

                # add translation
                self.hip_to_toe_pos[legIdx][0] += width_error
                self.hip_to_toe_pos[legIdx][1] += height_error
                self.hip_to_toe_pos[legIdx][2] += length_error                
                
                # calculate global positions (base to foot)
                self.global_positions[legIdx] = tp.global_foot_pos(legIdx, self.hip_to_toe_pos[legIdx])
                
                # apply RPY via rotation matrix
                self.global_positions[legIdx] = tp.apply_rpy(self.global_positions[legIdx][0], 
                                                          self.global_positions[legIdx][1], 
                                                          self.global_positions[legIdx][2], 
                                                          roll_error, pitch_error, yaw_error)
                
                # set new local position (hip to foot)
                self.hip_to_toe_pos[legIdx] = tp.local_foot_pos(legIdx,self.global_positions[legIdx])
                
                # get current leg angles from robot
                current_ths = [self.positions[legIdx*3 ], 
                               self.positions[legIdx*3 + 1], 
                               self.positions[legIdx*3 + 2]]
                
                # calculate closest solution for next position
                goal_ths  = A1_kinematics.calc_correct_thetas([self.hip_to_toe_pos[legIdx][0], 
                                                               self.hip_to_toe_pos[legIdx][1], 
                                                               self.hip_to_toe_pos[legIdx][2]], current_ths, legIdx % 2 == 1)
                
                # set goal angles for corresponding leg
                self.goal_pos[legIdx*3] = goal_ths[0]
                self.goal_pos[legIdx*3 + 1] = goal_ths[1]
                self.goal_pos[legIdx*3 + 2] = goal_ths[2] 
            # update the overall amount for each angle
            self.yaw += yaw_error
            self.pitch += pitch_error
            self.roll += roll_error
            self.height += height_error
            self.length += length_error
            self.width += width_error
            
            joints = list()
            # send joint commands    
            for i in range(0, NUMBER_OF_JOINTS):
                joints.append(self.goal_pos[i])    
                
            joint_msg.q = joints
            
            print(joint_msg)
            #self.robot_joints_pub.publish(joint_msg) uncommented for safety  

            t+=1
            t %= 100    
                
            self.screen.fill((255, 255, 255))

            # Draw joysticks
            self.draw_joystick(self.CENTER1, self.joystick1_pos, (0, 0, 255), "Roll/Move X")
            self.draw_joystick(self.CENTER2, self.joystick2_pos, (255, 0, 0), "Yaw/Move Z")
            self.draw_joystick(self.CENTER3, self.joystick3_pos, (0, 255, 0), "Pitch/Move Y")
            
            # Update display
            pygame.display.flip()
            self.rate.sleep()
            
        pygame.quit()
        
    def joint_states_callback(self, data):
        self.positions = data.position
    
    

if __name__ == "__main__":
    controller = PoseControllerUI()
    controller.run()
